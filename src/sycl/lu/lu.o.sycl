//==-------------------------------------------------------==//
//
// WARNING: This file is auto-generated. Do not modify.
//
// SYCL Device Compiler:
//   Codeplay ComputeCpp - CE 2.5.0 Device Compiler - clang version 8.0.0  (based on LLVM 8.0.0svn)
//
//==-------------------------------------------------------==//
#ifndef CODEPLAY_SYCL_bundler_STUB
#define CODEPLAY_SYCL_bundler_STUB

#include <SYCL/sycl_ih.hpp>

namespace cl {
namespace sycl {
namespace detail {
namespace {
// SYCL kernel traits primary template
template <typename T>
struct kernel_info;

 static_assert(2== COMPUTECPP_VERSION_MAJOR &&
5== COMPUTECPP_VERSION_MINOR &&
0== COMPUTECPP_VERSION_PATCH,"Error: Mismatch between compiler and runtime. Please ensure both are at the latest version. Compiler is version:2.5.0 Runtime: " __COMPUTECPP__ );

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
namespace cl {
namespace sycl {
namespace detail {
namespace {
unsigned char SYCL_bundler_bin_spir64[] = {
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xff, 0x02, 0x00, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x14, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xa4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x49,
  0x0a, 0x32, 0x44, 0x24, 0x48, 0x0a, 0x90, 0x21, 0x23, 0xc4, 0x52, 0x80,
  0x0c, 0x19, 0x21, 0x72, 0x24, 0x07, 0xc8, 0x48, 0x11, 0x62, 0xa8, 0xa0,
  0xa8, 0x40, 0xc6, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x0b, 0x04, 0x02, 0x24, 0x41, 0x10, 0x04, 0x89,
  0x05, 0xc2, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x60, 0x04, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x32, 0x22, 0x48, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x93, 0x22, 0xa4, 0x84, 0x04, 0x93, 0x22, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8a, 0x8c, 0x0b, 0x84, 0xa4, 0x4c,
  0x10, 0x50, 0x23, 0x00, 0x73, 0x04, 0xa0, 0x30, 0x04, 0x30, 0x88, 0x20,
  0x04, 0x73, 0x04, 0x60, 0x90, 0x04, 0x64, 0xa6, 0x68, 0x1e, 0xe8, 0x41,
  0x1e, 0xea, 0x61, 0x1c, 0xe8, 0xc1, 0x0d, 0xe6, 0x81, 0x1e, 0xc8, 0x41,
  0x0f, 0xf4, 0x20, 0x1c, 0xe4, 0x41, 0x1e, 0xc2, 0x21, 0x1f, 0x50, 0x50,
  0x66, 0x2a, 0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x83,
  0x71, 0x60, 0x07, 0x3d, 0xd0, 0x83, 0x79, 0xc8, 0x87, 0x71, 0x60, 0x07,
  0x3d, 0xd0, 0x03, 0x72, 0x28, 0x07, 0x7a, 0x08, 0x87, 0x74, 0x60, 0x07,
  0x3d, 0xd0, 0x83, 0x74, 0x20, 0x87, 0x5f, 0x90, 0x87, 0x70, 0x70, 0x87,
  0x73, 0x28, 0x87, 0x5f, 0x10, 0x87, 0x70, 0x98, 0x87, 0x72, 0x40, 0x81,
  0x99, 0x49, 0x0d, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d,
  0xc6, 0x81, 0x1d, 0xf4, 0x40, 0x0f, 0xe6, 0x21, 0x1f, 0xc6, 0x81, 0x1d,
  0xf4, 0x40, 0x0f, 0xc8, 0xa1, 0x1c, 0xe8, 0x21, 0x1c, 0xd2, 0x81, 0x1d,
  0xf4, 0x40, 0x0f, 0xc8, 0xa1, 0x1c, 0xec, 0x21, 0x1d, 0xc6, 0xa1, 0x1c,
  0x7e, 0x21, 0x1d, 0xdc, 0x81, 0x1c, 0xca, 0x01, 0x1f, 0x7e, 0x21, 0x1c,
  0xe4, 0x41, 0x1e, 0xc2, 0x21, 0x1f, 0x50, 0x70, 0x08, 0x95, 0x02, 0x84,
  0x30, 0x12, 0xa9, 0x22, 0x04, 0x42, 0xac, 0x08, 0x24, 0x90, 0x1b, 0x08,
  0x98, 0x23, 0x08, 0xa6, 0x00, 0x88, 0x00, 0x00, 0x13, 0xac, 0x79, 0x80,
  0x87, 0x74, 0x90, 0x07, 0x3b, 0xa0, 0x83, 0x36, 0xa8, 0x07, 0x77, 0x58,
  0x07, 0x77, 0x78, 0x87, 0x7b, 0x70, 0x87, 0x36, 0xa8, 0x07, 0x77, 0x58,
  0x07, 0x77, 0x78, 0x87, 0x7b, 0x70, 0x87, 0x0d, 0xae, 0x51, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x80, 0x07, 0x7a,
  0x80, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x78, 0xa0, 0x07, 0x78,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a,
  0x10, 0x07, 0x76, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74,
  0xa0, 0x07, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xf6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71,
  0x60, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xf6, 0x20, 0x07, 0x74,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xf6,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xf6, 0x40, 0x07, 0x78, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xf6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xf6, 0x90, 0x07, 0x76,
  0xa0, 0x07, 0x71, 0x20, 0x07, 0x78, 0xa0, 0x07, 0x71, 0x20, 0x07, 0x78,
  0xd0, 0x06, 0xf6, 0x10, 0x07, 0x72, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x72,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x72, 0x80, 0x07, 0x6d, 0x60, 0x0f, 0x71,
  0x90, 0x07, 0x72, 0xa0, 0x07, 0x72, 0x50, 0x07, 0x76, 0xa0, 0x07, 0x72,
  0x50, 0x07, 0x76, 0xd0, 0x06, 0xf6, 0x20, 0x07, 0x75, 0x60, 0x07, 0x7a,
  0x20, 0x07, 0x75, 0x60, 0x07, 0x7a, 0x20, 0x07, 0x75, 0x60, 0x07, 0x6d,
  0x60, 0x0f, 0x75, 0x10, 0x07, 0x72, 0xa0, 0x07, 0x75, 0x10, 0x07, 0x72,
  0xa0, 0x07, 0x75, 0x10, 0x07, 0x72, 0xd0, 0x06, 0xf6, 0x10, 0x07, 0x70,
  0x20, 0x07, 0x74, 0xa0, 0x07, 0x71, 0x00, 0x07, 0x72, 0x40, 0x07, 0x7a,
  0x10, 0x07, 0x70, 0x20, 0x07, 0x74, 0x30, 0x44, 0x59, 0x58, 0x01, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x60, 0x88, 0xd2, 0xac, 0x42, 0x00, 0x08, 0x00,
  0x00, 0x00, 0xc0, 0x10, 0x65, 0x61, 0x05, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x80, 0x21, 0xca, 0xc2, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x43,
  0x94, 0x85, 0x15, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x86, 0x28, 0xcf,
  0x2a, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x51, 0x9a, 0x55, 0x08,
  0x00, 0x01, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x06, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x10, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x22, 0x25, 0x50, 0x04, 0x23, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x1a, 0x09, 0x4c, 0xd0,
  0x10, 0x01, 0x02, 0x86, 0x08, 0x50, 0x30, 0x84, 0x20, 0x0e, 0x02, 0x19,
  0x22, 0x40, 0xc3, 0x82, 0x6a, 0x1d, 0xca, 0x41, 0x1e, 0xdc, 0xa1, 0x1c,
  0xd8, 0xe1, 0x17, 0xc2, 0x41, 0x1e, 0xce, 0xe1, 0x17, 0xc2, 0x81, 0x1c,
  0xc8, 0x41, 0x1e, 0x7e, 0x61, 0x1e, 0xe0, 0x21, 0x1c, 0xc6, 0xa1, 0x1c,
  0x86, 0x08, 0x50, 0x31, 0x44, 0x81, 0x08, 0x22, 0x21, 0x12, 0xe2, 0x20,
  0x92, 0x05, 0xd6, 0x3a, 0x94, 0x83, 0x3c, 0xb8, 0x43, 0x39, 0xb0, 0xc3,
  0x2f, 0x84, 0x83, 0x3c, 0x9c, 0xc3, 0x2f, 0x84, 0xc3, 0x38, 0x8c, 0x43,
  0x39, 0xcc, 0xc3, 0x3c, 0xfc, 0x42, 0x3c, 0xd4, 0x43, 0x38, 0xb0, 0xc3,
  0x02, 0xc2, 0x1d, 0xde, 0xc1, 0x1d, 0xca, 0x61, 0x88, 0x02, 0x1d, 0x10,
  0x02, 0x21, 0x10, 0x02, 0x21, 0x0b, 0x9e, 0x75, 0x28, 0x07, 0x79, 0x70,
  0x87, 0x72, 0x60, 0x87, 0x5f, 0x08, 0x07, 0x79, 0x38, 0x87, 0x5f, 0xa0,
  0x87, 0x7c, 0x80, 0x87, 0x72, 0x58, 0x50, 0xd4, 0x03, 0x3b, 0xbc, 0x83,
  0x3b, 0x9c, 0xc3, 0x82, 0x83, 0x1c, 0xde, 0xa1, 0x1e, 0xc4, 0x81, 0x1d,
  0xca, 0x41, 0x0d, 0x16, 0xa8, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3,
  0x3c, 0x80, 0xc1, 0x38, 0xb0, 0x83, 0x1e, 0xe8, 0xc1, 0x3c, 0xe4, 0xc3,
  0x38, 0xb0, 0x83, 0x1e, 0xe8, 0x01, 0x39, 0x94, 0x03, 0x3d, 0x84, 0x43,
  0x3a, 0xb0, 0x83, 0x1e, 0xe8, 0x01, 0x39, 0x94, 0x83, 0x3d, 0xa4, 0xc3,
  0x38, 0x94, 0xc3, 0x2f, 0xa4, 0x83, 0x3b, 0x90, 0x43, 0x39, 0xe0, 0xc3,
  0x2f, 0x84, 0x83, 0x3c, 0xc8, 0x43, 0x38, 0xe4, 0xc3, 0x10, 0x05, 0x52,
  0xa0, 0x05, 0x5a, 0x20, 0x06, 0x6a, 0x16, 0x50, 0xeb, 0x50, 0x0e, 0xf2,
  0xe0, 0x0e, 0xe5, 0xc0, 0x0e, 0xbf, 0x10, 0x0e, 0xf2, 0x70, 0x0e, 0xbf,
  0x20, 0x0e, 0xe1, 0x30, 0x0f, 0xe5, 0xf0, 0x0b, 0xf4, 0x90, 0x0f, 0xf0,
  0x50, 0x0e, 0x43, 0x14, 0xe8, 0x81, 0x16, 0x68, 0x81, 0x18, 0xa8, 0x59,
  0x40, 0xad, 0x43, 0x39, 0xc8, 0x83, 0x3b, 0x94, 0x03, 0x3b, 0xfc, 0x42,
  0x38, 0xc8, 0xc3, 0x39, 0xfc, 0x02, 0x3d, 0xe4, 0x03, 0x3c, 0x94, 0xc3,
  0x2f, 0xc4, 0x43, 0x3d, 0x84, 0x03, 0x3b, 0x2c, 0x00, 0x86, 0x28, 0x50,
  0x04, 0x49, 0x90, 0x04, 0x49, 0x90, 0xb4, 0xe0, 0x59, 0x87, 0x72, 0x90,
  0x07, 0x77, 0x28, 0x07, 0x76, 0xf8, 0x85, 0x70, 0x90, 0x87, 0x73, 0xf8,
  0x05, 0x77, 0x08, 0x87, 0x76, 0x28, 0x87, 0x05, 0x45, 0x3b, 0xfc, 0x02,
  0x3c, 0xd0, 0x83, 0x3c, 0x2c, 0x58, 0xda, 0xe1, 0x17, 0xcc, 0xa1, 0x1e,
  0xd8, 0x81, 0x1d, 0x64, 0x21, 0x1c, 0xdc, 0xe1, 0x1c, 0xca, 0x61, 0x88,
  0x02, 0x51, 0x90, 0x04, 0x49, 0x50, 0x05, 0x59, 0x43, 0x9c, 0x05, 0x80,
  0x0c, 0x28, 0x81, 0x1c, 0x08, 0x82, 0x26, 0xe8, 0x1a, 0x22, 0x40, 0xd9,
  0x10, 0x67, 0x11, 0x20, 0x03, 0x4a, 0x20, 0x07, 0x82, 0xa0, 0x09, 0xba,
  0x86, 0x08, 0xd0, 0x36, 0xc4, 0x59, 0x06, 0xc8, 0x80, 0x12, 0xc8, 0x81,
  0x20, 0x68, 0x82, 0xae, 0x21, 0x02, 0xd4, 0x0d, 0x71, 0x16, 0x02, 0x32,
  0xa0, 0x04, 0x72, 0x20, 0x08, 0x9a, 0xa0, 0x6b, 0x81, 0x1a, 0xcc, 0xc2,
  0x3b, 0xd4, 0x83, 0x3c, 0x8c, 0x43, 0x39, 0x80, 0x01, 0x3b, 0x84, 0x83,
  0x3b, 0x9c, 0x43, 0x3d, 0x84, 0xc3, 0x39, 0x94, 0x83, 0x1e, 0x80, 0xc1,
  0x2b, 0xc0, 0x43, 0x39, 0xb8, 0xc3, 0x28, 0xb0, 0x02, 0x18, 0x8c, 0x02,
  0x1b, 0x80, 0x81, 0x2d, 0x94, 0x83, 0x3c, 0xcc, 0x43, 0x3a, 0xbc, 0x83,
  0x3b, 0xe8, 0x01, 0x18, 0xc4, 0x01, 0x1c, 0xc8, 0x01, 0x1c, 0xc0, 0x01,
  0x1c, 0x0c, 0x11, 0xa0, 0x6f, 0x08, 0xb0, 0x40, 0x19, 0x07, 0x76, 0xf8,
  0x05, 0x72, 0x78, 0x87, 0x7a, 0x10, 0x07, 0x76, 0x28, 0x87, 0x79, 0x18,
  0x22, 0x40, 0x62, 0x40, 0xe9, 0x0d, 0xae, 0xcc, 0x6d, 0x8c, 0xcd, 0xe5,
  0x6d, 0x8c, 0xcd, 0xc5, 0xae, 0x4c, 0x6e, 0x2e, 0xed, 0xcd, 0x6d, 0x4a,
  0x20, 0x70, 0x7a, 0x83, 0x2b, 0x73, 0x1b, 0x63, 0x73, 0x99, 0x83, 0x4b,
  0x93, 0x73, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x9b, 0x12, 0x08,
  0x74, 0xde, 0xe0, 0xca, 0xdc, 0xc6, 0xd8, 0x5c, 0xd6, 0xca, 0xe4, 0xdc,
  0xca, 0xd8, 0xe6, 0xa6, 0x10, 0x98, 0xc6, 0x79, 0x54, 0xd8, 0xd8, 0xec,
  0xda, 0x5c, 0xd2, 0xc8, 0xca, 0xdc, 0xe8, 0xa6, 0x04, 0x60, 0x40, 0xeb,
  0x0d, 0xae, 0xcc, 0x6d, 0x8c, 0xcd, 0xa5, 0x6e, 0xae, 0x8c, 0xcc, 0xa5,
  0x0c, 0x8f, 0xae, 0xcc, 0x6d, 0x2e, 0xed, 0xcd, 0x6d, 0x6e, 0x4a, 0x10,
  0x06, 0x14, 0x83, 0x37, 0xb8, 0x32, 0xb7, 0x31, 0x36, 0x97, 0xba, 0xb9,
  0x32, 0x32, 0x97, 0x37, 0x38, 0xba, 0xb4, 0x37, 0xb7, 0x30, 0x36, 0x97,
  0xb1, 0x37, 0xb9, 0x32, 0x17, 0xb3, 0xb2, 0x30, 0xba, 0x3a, 0xb9, 0xb2,
  0xb9, 0x29, 0xc1, 0x18, 0xf0, 0x7a, 0x83, 0x2b, 0x73, 0x1b, 0x63, 0x73,
  0x19, 0x7b, 0x6b, 0x83, 0x4b, 0x63, 0x2b, 0x93, 0x73, 0x79, 0x83, 0xa3,
  0x4b, 0x7b, 0x73, 0x9b, 0x9b, 0x12, 0x84, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x00, 0x71, 0x20, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
  0x36, 0x60, 0xb1, 0x32, 0x57, 0xfe, 0xc2, 0x02, 0x48, 0xd2, 0xbf, 0x50,
  0xbf, 0x42, 0x44, 0x0d, 0xb1, 0xfc, 0xb6, 0x09, 0x58, 0xac, 0xcc, 0x95,
  0xbf, 0xb0, 0x00, 0x92, 0xf4, 0x2f, 0xd4, 0xaf, 0x10, 0x51, 0x43, 0x2c,
  0xff, 0x6d, 0x04, 0x14, 0x2b, 0x73, 0xe5, 0x2f, 0x2c, 0x80, 0x24, 0xfd,
  0x0b, 0xf5, 0x2b, 0x44, 0xd4, 0x10, 0x8b, 0x19, 0x48, 0xff, 0x5c, 0xdf,
  0x06, 0x31, 0xfd, 0xc6, 0xe2, 0x04, 0xc0, 0xf2, 0x23, 0x43, 0x62, 0x01,
  0xd1, 0x3f, 0xd7, 0xb6, 0xe0, 0x34, 0x15, 0x11, 0x4d, 0xff, 0xe2, 0x34,
  0x06, 0x62, 0x05, 0xd1, 0x3f, 0xd7, 0xb6, 0xe0, 0x34, 0x15, 0x11, 0x4d,
  0x3f, 0x85, 0x34, 0x13, 0x63, 0x00, 0x16, 0x2b, 0x73, 0xe5, 0x2f, 0x2c,
  0x80, 0x24, 0xfd, 0x0b, 0xf5, 0x2b, 0x44, 0xd4, 0x10, 0xcb, 0x4f, 0x03,
  0x61, 0x20, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x13, 0x04, 0x4b, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x4a, 0x60, 0x04,
  0xa0, 0x08, 0x48, 0x8c, 0x00, 0x00, 0x00, 0x00, 0xb5, 0x28, 0x30, 0xdc,
  0x20, 0x29, 0x62, 0x30, 0xcb, 0x10, 0x28, 0xd3, 0x78, 0x46, 0xf3, 0x24,
  0x49, 0xe2, 0x10, 0x35, 0x46, 0x0c, 0x08, 0xc0, 0x26, 0x82, 0xaa, 0x2c,
  0x45, 0xea, 0x52, 0x60, 0x3c, 0x81, 0xc1, 0x28, 0x23, 0xc3, 0x0d, 0x5a,
  0xe4, 0xcc, 0x32, 0x08, 0xca, 0x36, 0x50, 0x21, 0x9c, 0x42, 0xa2, 0x05,
  0x03, 0x15, 0x83, 0x29, 0x24, 0x59, 0x30, 0x50, 0x11, 0x90, 0x42, 0x72,
  0x05, 0x03, 0x15, 0x01, 0x18, 0x24, 0x4a, 0x60, 0x9f, 0x03, 0x81, 0xe1,
  0x06, 0x30, 0x90, 0xc8, 0x60, 0x96, 0x61, 0x50, 0xc2, 0xa0, 0xc0, 0xc0,
  0x92, 0x12, 0x83, 0x0f, 0xc6, 0x13, 0x98, 0x31, 0x20, 0x32, 0x20, 0x55,
  0x06, 0x1c, 0x0d, 0x46, 0x90, 0x81, 0x19, 0x10, 0x40, 0x7d, 0x10, 0x0c,
  0x37, 0x9c, 0x81, 0x44, 0x06, 0xb3, 0x0c, 0x44, 0x81, 0x06, 0x03, 0x15,
  0x01, 0x1c, 0x10, 0x67, 0x30, 0x50, 0x47, 0x2a, 0x0d, 0x2c, 0xa9, 0x35,
  0xf8, 0x60, 0x3c, 0x81, 0x61, 0x03, 0x6a, 0x03, 0x52, 0x6e, 0xa0, 0x06,
  0x34, 0x18, 0xd1, 0x06, 0x6f, 0x40, 0x00, 0x95, 0x06, 0x0e, 0x0c, 0x37,
  0xc0, 0x81, 0x44, 0x06, 0xb3, 0x0c, 0x44, 0x11, 0x07, 0xb3, 0x04, 0xc6,
  0x40, 0x45, 0x20, 0x0a, 0x08, 0x18, 0x14, 0x25, 0x07, 0x96, 0xd4, 0x1c,
  0x7c, 0x30, 0x9e, 0xc0, 0xd0, 0xc1, 0x2c, 0xc1, 0x31, 0x50, 0x11, 0x80,
  0x81, 0x01, 0x0a, 0x07, 0xd5, 0x01, 0x29, 0x3b, 0xf0, 0x60, 0x3c, 0x81,
  0xc1, 0x03, 0xca, 0x03, 0x52, 0x77, 0xa0, 0x07, 0x52, 0x76, 0x30, 0x07,
  0x30, 0x9e, 0xc0, 0xf0, 0x01, 0xf5, 0x01, 0x29, 0x3f, 0xd8, 0x83, 0x18,
  0x8c, 0xe8, 0x83, 0x3f, 0x20, 0x80, 0xb2, 0x03, 0x07, 0x86, 0x1b, 0x40,
  0x41, 0x22, 0x83, 0x59, 0x86, 0x03, 0x09, 0x85, 0x92, 0x03, 0x07, 0x86,
  0x1b, 0x44, 0x41, 0x22, 0x83, 0x59, 0x06, 0x23, 0x19, 0x85, 0x02, 0x03,
  0x4b, 0x8a, 0x14, 0xc0, 0x00, 0xc6, 0x13, 0x98, 0x52, 0x20, 0x53, 0x20,
  0xc3, 0x0d, 0xa7, 0x10, 0x39, 0xb3, 0x0c, 0x82, 0x82, 0x0a, 0x18, 0x0e,
  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xc6, 0x50, 0x30, 0xff,
  0x33, 0x45, 0xd6, 0xb0, 0x30, 0x7f, 0x41, 0x2d, 0xcb, 0x0a, 0x34, 0x06,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x00, 0x13, 0x04, 0x49, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x14, 0x4a, 0xa0, 0x80, 0x46, 0x00, 0x00, 0x00,
  0xb5, 0x28, 0x30, 0xdc, 0x10, 0x2d, 0x62, 0x30, 0xcb, 0x10, 0x20, 0xd2,
  0x78, 0x46, 0x03, 0x25, 0x49, 0xe2, 0xd0, 0x34, 0x46, 0x0c, 0x08, 0xc1,
  0x26, 0x8c, 0xa4, 0x2a, 0x45, 0xca, 0x8a, 0xa0, 0xae, 0xe7, 0x0a, 0x7b,
  0xb2, 0x32, 0x05, 0x86, 0x1b, 0x32, 0x8d, 0x0c, 0x46, 0x0c, 0x08, 0xc0,
  0x26, 0x02, 0xca, 0x16, 0x07, 0x02, 0xc3, 0x0d, 0x5d, 0x44, 0x06, 0xb3,
  0x0c, 0x02, 0xe2, 0x0d, 0x54, 0x04, 0x74, 0x70, 0x74, 0xc1, 0x40, 0x45,
  0xf0, 0x1d, 0x4b, 0x50, 0x60, 0xc0, 0xc9, 0x2c, 0xc1, 0x30, 0x50, 0x11,
  0xc8, 0x81, 0xf1, 0x09, 0xb3, 0x0c, 0x84, 0xb1, 0x95, 0x18, 0x70, 0x52,
  0x63, 0x00, 0x06, 0x30, 0x9e, 0xc0, 0x90, 0xc1, 0x2c, 0x41, 0x31, 0x50,
  0x11, 0x64, 0x04, 0x1c, 0x14, 0x54, 0x06, 0xa4, 0xcc, 0x20, 0x0c, 0x60,
  0x3c, 0x81, 0x41, 0x03, 0x4a, 0x03, 0x52, 0x67, 0xa0, 0x06, 0x52, 0x66,
  0x30, 0x06, 0x30, 0x9e, 0xc0, 0xb0, 0x01, 0xb5, 0x01, 0x29, 0x37, 0x58,
  0x83, 0x18, 0x8c, 0x68, 0x83, 0x37, 0x20, 0x00, 0x33, 0x03, 0x07, 0x02,
  0xc3, 0x0d, 0x70, 0xa0, 0x91, 0xc1, 0x2c, 0x43, 0x61, 0xc4, 0x41, 0x89,
  0x81, 0x03, 0xc3, 0x0d, 0x72, 0x10, 0x91, 0xc1, 0x2c, 0xc3, 0x70, 0xcc,
  0x81, 0x7d, 0x0e, 0x04, 0x86, 0x1b, 0xe8, 0x20, 0x22, 0x83, 0x59, 0x06,
  0x01, 0xa9, 0x03, 0x0c, 0x07, 0x02, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0xc6, 0x50, 0x30, 0xff, 0x33, 0x45, 0xd6, 0xb0, 0x30, 0x7f, 0x41, 0x2d,
  0xcb, 0x0a, 0x34, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x13, 0x04, 0x4d, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x4a, 0xa0, 0x80,
  0x46, 0x00, 0x00, 0x00, 0xb5, 0x28, 0x30, 0xdc, 0x10, 0x2d, 0x62, 0x30,
  0xcb, 0x10, 0x30, 0xd2, 0x78, 0x46, 0x03, 0x25, 0x49, 0xe2, 0xd0, 0x34,
  0x46, 0x0c, 0x08, 0xc1, 0x26, 0x8c, 0xa4, 0x2a, 0x45, 0xca, 0x8a, 0xa0,
  0xae, 0xe7, 0x0a, 0x7b, 0xb2, 0x32, 0x05, 0x86, 0x1b, 0x32, 0x8d, 0x0c,
  0x46, 0x0c, 0x08, 0xc0, 0x26, 0x02, 0x6a, 0x96, 0x40, 0x18, 0xa8, 0x08,
  0x96, 0xe0, 0x0f, 0x96, 0x59, 0x06, 0x62, 0xd8, 0xac, 0x73, 0x20, 0x30,
  0x4b, 0xb0, 0x54, 0xc7, 0x49, 0x7d, 0x1d, 0x8c, 0x27, 0x30, 0x60, 0x30,
  0x4b, 0x50, 0x0c, 0x54, 0x04, 0x19, 0x91, 0x06, 0x05, 0x85, 0x01, 0x29,
  0x31, 0xe0, 0xa4, 0xc8, 0xa0, 0x83, 0xf1, 0x04, 0xa6, 0x0c, 0xc8, 0x0c,
  0x48, 0x9d, 0xc1, 0x18, 0xd0, 0x60, 0x84, 0x19, 0xa0, 0x01, 0x01, 0x98,
  0x18, 0x38, 0x10, 0x18, 0x6e, 0x48, 0x03, 0x8d, 0x0c, 0x66, 0x19, 0x0a,
  0x43, 0x0d, 0xac, 0x73, 0x20, 0x30, 0xdc, 0xb0, 0x06, 0x11, 0x19, 0xcc,
  0x12, 0x1c, 0x03, 0x15, 0x41, 0x66, 0xf4, 0x81, 0x32, 0xcb, 0x80, 0x28,
  0x6c, 0x50, 0x6d, 0xc0, 0x49, 0xb9, 0x41, 0x07, 0xe3, 0x09, 0xcc, 0x1b,
  0xcc, 0x12, 0x24, 0x03, 0x15, 0xc1, 0x1a, 0x20, 0x7b, 0x90, 0x10, 0x1c,
  0x90, 0x8a, 0x83, 0x0f, 0xc6, 0x13, 0x98, 0x39, 0x20, 0x3a, 0x20, 0x25,
  0x07, 0x75, 0x20, 0x15, 0x07, 0x6e, 0x00, 0xe3, 0x09, 0xcc, 0x1d, 0x10,
  0x1e, 0x90, 0xca, 0x03, 0x3b, 0x88, 0xc1, 0x08, 0x3c, 0xd0, 0x03, 0x02,
  0xa8, 0x38, 0x70, 0x60, 0xb8, 0x61, 0x0f, 0x22, 0x32, 0x98, 0x65, 0x48,
  0x14, 0x3e, 0xb0, 0x36, 0x70, 0x20, 0x30, 0xdc, 0xd0, 0x07, 0x1a, 0x19,
  0xcc, 0x32, 0x1c, 0x8b, 0x1f, 0x0c, 0x54, 0x04, 0xde, 0xb0, 0x06, 0xca,
  0x70, 0xc3, 0x1f, 0x44, 0x64, 0x30, 0xcb, 0x20, 0x30, 0xa0, 0x80, 0xe1,
  0x40, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xc6, 0x50, 0x30, 0xff,
  0x33, 0x45, 0xd6, 0xb0, 0x30, 0x7f, 0x41, 0x2d, 0xcb, 0x0a, 0x34, 0x06,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x45, 0x00, 0x00, 0x00, 0x13, 0x04, 0x45, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x68, 0x04, 0xa0, 0x04, 0x48, 0x8c,
  0x00, 0x00, 0x00, 0x00, 0xe3, 0x19, 0xcd, 0x93, 0x24, 0x09, 0x44, 0xd2,
  0x18, 0x31, 0x20, 0x04, 0x9b, 0x30, 0x8e, 0x11, 0x03, 0x42, 0xb0, 0x09,
  0x23, 0xa9, 0x45, 0x81, 0xaa, 0x2c, 0x18, 0x31, 0x20, 0x00, 0x9b, 0x28,
  0xae, 0xa2, 0x2c, 0x18, 0x31, 0x20, 0x00, 0x9b, 0x28, 0x96, 0x11, 0x03,
  0x02, 0xb0, 0x89, 0x40, 0x1b, 0x6e, 0xb0, 0x36, 0x31, 0xa8, 0xcc, 0xb9,
  0xea, 0x9c, 0x9c, 0x65, 0x10, 0x02, 0x6e, 0xc4, 0x80, 0x00, 0x6c, 0x22,
  0xc0, 0x46, 0x0c, 0x08, 0xc0, 0x26, 0x82, 0xc9, 0x3c, 0x30, 0x10, 0xc1,
  0x2c, 0x01, 0x31, 0x62, 0x40, 0x00, 0x36, 0x11, 0x4c, 0xe6, 0x89, 0x81,
  0x08, 0x46, 0x0c, 0x08, 0xc0, 0x26, 0x02, 0x6c, 0x96, 0x60, 0x18, 0xa8,
  0x08, 0x36, 0x41, 0x0e, 0x86, 0x81, 0x0a, 0x42, 0x13, 0xe2, 0x60, 0x18,
  0xa8, 0x10, 0x22, 0x01, 0x0e, 0x86, 0x2a, 0x83, 0x31, 0x80, 0xf1, 0x04,
  0x06, 0x0d, 0x28, 0x0d, 0x88, 0x95, 0x81, 0x18, 0x88, 0xa0, 0xd6, 0x80,
  0x0c, 0x60, 0x3c, 0x81, 0x61, 0x03, 0x6a, 0x03, 0x52, 0x6a, 0xe0, 0x06,
  0x52, 0x67, 0xf0, 0x06, 0x60, 0x66, 0x70, 0x80, 0x60, 0xc4, 0x80, 0x00,
  0x6c, 0x22, 0x88, 0x83, 0xe1, 0x06, 0x4b, 0x0e, 0xc4, 0x60, 0x96, 0x61,
  0x20, 0xe6, 0x60, 0xa0, 0x22, 0x08, 0x83, 0x60, 0x0c, 0x86, 0x81, 0x8a,
  0xe0, 0x0b, 0xc8, 0x60, 0x18, 0xa8, 0x10, 0xa2, 0x00, 0x0e, 0x86, 0xaa,
  0x03, 0x3a, 0x80, 0xf1, 0x04, 0xe6, 0x0e, 0x08, 0x0f, 0x48, 0xe5, 0x81,
  0x1d, 0xc4, 0x60, 0x04, 0x1e, 0xe8, 0x01, 0x01, 0x60, 0x38, 0x10, 0x00,
  0x05, 0x00, 0x00, 0x00, 0xc6, 0x50, 0x30, 0xff, 0x33, 0x45, 0xd6, 0xb0,
  0x30, 0x7f, 0x41, 0x2d, 0xcb, 0x0a, 0x34, 0x06, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const char *const SYCL_bundler_bin_spir64_features[] = {
  0
};
const kernel_binary_info SYCL_bundler_bin_spir64_info = {
  "spir64",
  64,
  SYCL_bundler_bin_spir64,
  sizeof(SYCL_bundler_bin_spir64),
  SYCL_bundler_bin_spir64_features
};

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
class lu_kernel_0;

//
// SYCL kernel info for: ::lu_kernel_0
//
namespace cl {
namespace sycl {
namespace detail {
namespace {

template <>
struct kernel_info< ::lu_kernel_0 > {
  static const char* name;

  static const size_t bin_count;
  static const kernel_definition<7> bin_info[];

  static const std::array<field_descriptor, 3> fields;
  static const std::array<::cl::sycl::detail::parameter_kind, 7> arg_desc;

using type_id_1 = unsigned long; // size_t
using type_id_6 = detail::host_arg_container; // opencl_mirror_convert device_arg_container
struct /* accessor_device_base */ type_id_5 {
  type_id_6 var_id_0; // m_deviceArgs
  };
struct /* accessor_common */ alignas(8) type_id_4 : type_id_5 {
  };
struct /* accessor_buffer_interface */ type_id_3 : type_id_4 {
  };
struct /* accessor */ alignas(8) type_id_2 : type_id_3 {
  };
struct type_id_0 {
  type_id_1 var_id_0;
  type_id_1 var_id_1;
  type_id_2 var_id_2;
  };
using mirror_type_0 = type_id_0;

};
const std::array<field_descriptor, 3> kernel_info< ::lu_kernel_0 >::fields = {{
  { sizeof(mirror_type_0::var_id_0),
    offsetof(mirror_type_0, var_id_0),
    ::cl::sycl::detail::parameter_class::user_defined,
    0 },
  { sizeof(mirror_type_0::var_id_1),
    offsetof(mirror_type_0, var_id_1),
    ::cl::sycl::detail::parameter_class::user_defined,
    1 },
  { sizeof(mirror_type_0::var_id_2.var_id_0),
    offsetof(mirror_type_0, var_id_2.var_id_0),
    ::cl::sycl::detail::parameter_class::value,
    2 }
}};
const std::array<::cl::sycl::detail::parameter_kind, 7> kernel_info< ::lu_kernel_0 >::arg_desc = {{
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - unsigned long */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - unsigned long */,
  static_cast<::cl::sycl::detail::parameter_kind>(2) /* Pointer - __global double * */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - signed char */,
}};
const char* kernel_info< ::lu_kernel_0 >::name = "SYCL_class_lu_kernel_0";
const kernel_definition<7> kernel_info< ::lu_kernel_0 >::bin_info[] = {
  {&SYCL_bundler_bin_spir64_info, {{true, true, true, false, false, true, false, }}},
  {0, {}}
};
const size_t kernel_info< ::lu_kernel_0 >::bin_count = 1;

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
class lu_kernel_3;

//
// SYCL kernel info for: ::lu_kernel_3
//
namespace cl {
namespace sycl {
namespace detail {
namespace {

template <>
struct kernel_info< ::lu_kernel_3 > {
  static const char* name;

  static const size_t bin_count;
  static const kernel_definition<7> bin_info[];

  static const std::array<field_descriptor, 3> fields;
  static const std::array<::cl::sycl::detail::parameter_kind, 7> arg_desc;

using type_id_1 = unsigned long; // size_t
using type_id_6 = detail::host_arg_container; // opencl_mirror_convert device_arg_container
struct /* accessor_device_base */ type_id_5 {
  type_id_6 var_id_0; // m_deviceArgs
  };
struct /* accessor_common */ alignas(8) type_id_4 : type_id_5 {
  };
struct /* accessor_buffer_interface */ type_id_3 : type_id_4 {
  };
struct /* accessor */ alignas(8) type_id_2 : type_id_3 {
  };
struct type_id_0 {
  type_id_1 var_id_0;
  type_id_1 var_id_1;
  type_id_2 var_id_2;
  };
using mirror_type_0 = type_id_0;

};
const std::array<field_descriptor, 3> kernel_info< ::lu_kernel_3 >::fields = {{
  { sizeof(mirror_type_0::var_id_0),
    offsetof(mirror_type_0, var_id_0),
    ::cl::sycl::detail::parameter_class::user_defined,
    0 },
  { sizeof(mirror_type_0::var_id_1),
    offsetof(mirror_type_0, var_id_1),
    ::cl::sycl::detail::parameter_class::user_defined,
    1 },
  { sizeof(mirror_type_0::var_id_2.var_id_0),
    offsetof(mirror_type_0, var_id_2.var_id_0),
    ::cl::sycl::detail::parameter_class::value,
    2 }
}};
const std::array<::cl::sycl::detail::parameter_kind, 7> kernel_info< ::lu_kernel_3 >::arg_desc = {{
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - unsigned long */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - unsigned long */,
  static_cast<::cl::sycl::detail::parameter_kind>(2) /* Pointer - __global double * */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - signed char */,
}};
const char* kernel_info< ::lu_kernel_3 >::name = "SYCL_class_lu_kernel_3";
const kernel_definition<7> kernel_info< ::lu_kernel_3 >::bin_info[] = {
  {&SYCL_bundler_bin_spir64_info, {{true, true, true, false, false, true, false, }}},
  {0, {}}
};
const size_t kernel_info< ::lu_kernel_3 >::bin_count = 1;

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
class lu_kernel_2;

//
// SYCL kernel info for: ::lu_kernel_2
//
namespace cl {
namespace sycl {
namespace detail {
namespace {

template <>
struct kernel_info< ::lu_kernel_2 > {
  static const char* name;

  static const size_t bin_count;
  static const kernel_definition<7> bin_info[];

  static const std::array<field_descriptor, 3> fields;
  static const std::array<::cl::sycl::detail::parameter_kind, 7> arg_desc;

using type_id_1 = unsigned long; // size_t
using type_id_6 = detail::host_arg_container; // opencl_mirror_convert device_arg_container
struct /* accessor_device_base */ type_id_5 {
  type_id_6 var_id_0; // m_deviceArgs
  };
struct /* accessor_common */ alignas(8) type_id_4 : type_id_5 {
  };
struct /* accessor_buffer_interface */ type_id_3 : type_id_4 {
  };
struct /* accessor */ alignas(8) type_id_2 : type_id_3 {
  };
struct type_id_0 {
  type_id_1 var_id_0;
  type_id_1 var_id_1;
  type_id_2 var_id_2;
  };
using mirror_type_0 = type_id_0;

};
const std::array<field_descriptor, 3> kernel_info< ::lu_kernel_2 >::fields = {{
  { sizeof(mirror_type_0::var_id_0),
    offsetof(mirror_type_0, var_id_0),
    ::cl::sycl::detail::parameter_class::user_defined,
    0 },
  { sizeof(mirror_type_0::var_id_1),
    offsetof(mirror_type_0, var_id_1),
    ::cl::sycl::detail::parameter_class::user_defined,
    1 },
  { sizeof(mirror_type_0::var_id_2.var_id_0),
    offsetof(mirror_type_0, var_id_2.var_id_0),
    ::cl::sycl::detail::parameter_class::value,
    2 }
}};
const std::array<::cl::sycl::detail::parameter_kind, 7> kernel_info< ::lu_kernel_2 >::arg_desc = {{
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - unsigned long */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - unsigned long */,
  static_cast<::cl::sycl::detail::parameter_kind>(2) /* Pointer - __global double * */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - signed char */,
}};
const char* kernel_info< ::lu_kernel_2 >::name = "SYCL_class_lu_kernel_2";
const kernel_definition<7> kernel_info< ::lu_kernel_2 >::bin_info[] = {
  {&SYCL_bundler_bin_spir64_info, {{true, true, true, false, false, true, false, }}},
  {0, {}}
};
const size_t kernel_info< ::lu_kernel_2 >::bin_count = 1;

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
class lu_kernel;

//
// SYCL kernel info for: ::lu_kernel
//
namespace cl {
namespace sycl {
namespace detail {
namespace {

template <>
struct kernel_info< ::lu_kernel > {
  static const char* name;

  static const size_t bin_count;
  static const kernel_definition<7> bin_info[];

  static const std::array<field_descriptor, 3> fields;
  static const std::array<::cl::sycl::detail::parameter_kind, 7> arg_desc;

using type_id_1 = unsigned long; // size_t
using type_id_6 = detail::host_arg_container; // opencl_mirror_convert device_arg_container
struct /* accessor_device_base */ type_id_5 {
  type_id_6 var_id_0; // m_deviceArgs
  };
struct /* accessor_common */ alignas(8) type_id_4 : type_id_5 {
  };
struct /* accessor_buffer_interface */ type_id_3 : type_id_4 {
  };
struct /* accessor */ alignas(8) type_id_2 : type_id_3 {
  };
struct type_id_0 {
  type_id_1 var_id_0;
  type_id_1 var_id_1;
  type_id_2 var_id_2;
  };
using mirror_type_0 = type_id_0;

};
const std::array<field_descriptor, 3> kernel_info< ::lu_kernel >::fields = {{
  { sizeof(mirror_type_0::var_id_0),
    offsetof(mirror_type_0, var_id_0),
    ::cl::sycl::detail::parameter_class::user_defined,
    0 },
  { sizeof(mirror_type_0::var_id_1),
    offsetof(mirror_type_0, var_id_1),
    ::cl::sycl::detail::parameter_class::user_defined,
    1 },
  { sizeof(mirror_type_0::var_id_2.var_id_0),
    offsetof(mirror_type_0, var_id_2.var_id_0),
    ::cl::sycl::detail::parameter_class::value,
    2 }
}};
const std::array<::cl::sycl::detail::parameter_kind, 7> kernel_info< ::lu_kernel >::arg_desc = {{
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - unsigned long */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - unsigned long */,
  static_cast<::cl::sycl::detail::parameter_kind>(2) /* Pointer - __global double * */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - signed char */,
}};
const char* kernel_info< ::lu_kernel >::name = "SYCL_class_lu_kernel";
const kernel_definition<7> kernel_info< ::lu_kernel >::bin_info[] = {
  {&SYCL_bundler_bin_spir64_info, {{true, true, true, false, false, true, false, }}},
  {0, {}}
};
const size_t kernel_info< ::lu_kernel >::bin_count = 1;

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
#endif // CODEPLAY_SYCL_bundler_STUB
